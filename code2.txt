import React, { useState } from 'react';

interface Box {
  heading: string;
  content: string;
  expanded?: boolean;
}

const Page: React.FC = () => {
  const [boxes, setBoxes] = useState<Box[]>([
    { heading: 'Box 1', content: 'Content 1' },
    { heading: 'Box 2', content: 'Content 2' },
    { heading: 'Box 3', content: 'Content 3' },
    { heading: 'Box 4', content: 'Content 4' },
  ]);

  const [selectedRowOption, setSelectedRowOption] = useState<string>('all');
  const [fromRow, setFromRow] = useState<number>(1);
  const [toRow, setToRow] = useState<number>(10);

  const toggleBoxExpansion = (index: number) => {
    setBoxes(
      boxes.map((box, i) => (i === index ? { ...box, expanded: !box.expanded } : box))
    );
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    // Handle file upload logic here (e.g., parsing excel data)
    console.log('Uploaded file:', file);
  };

  const handleRowSelectionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSelectedRowOption(event.target.value);
  };

  const handleFromRowChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFromRow(parseInt(event.target.value));
  };

  const handleToRowChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setToRow(parseInt(event.target.value));
  };

  return (
    <div className="page-container">
      <div className="left-side">
        {boxes.map((box, index) => (
          <BoxComponent key={index} box={box} onToggle={() => toggleBoxExpansion(index)} />
        ))}
      </div>
      <div className="right-side">
        <div className="file-upload">
          <label htmlFor="file-upload">
            <img src="/file-upload.svg" alt="File Upload" />
          </label>
          <input type="file" id="file-upload" onChange={handleFileUpload} />
        </div>
        <div className="row-selection">
          <label htmlFor="row-selection">Select Rows:</label>
          <select id="row-selection" value={selectedRowOption} onChange={handleRowSelectionChange}>
            <option value="all">All Rows</option>
            <option value="from-to">From - To</option>
          </select>
          {selectedRowOption === 'from-to' && (
            <>
              <label htmlFor="from-row">From:</label>
              <input type="number" id="from-row" value={fromRow} onChange={handleFromRowChange} />
              <label htmlFor="to-row">To:</label>
              <input type="number" id="to-row" value={toRow} onChange={handleToRowChange} />
            </>
          )}
        </div>
        <button className="action-button">Process</button>
      </div>
    </div>
  );
};

const BoxComponent: React.FC<{ box: Box; onToggle: () => void }> = ({ box, onToggle }) => {
  return (
    <div className={`box ${box.expanded ? 'expanded' : ''}`} onClick={onToggle}>
      <h3>{box.heading}</h3>
      <p>{box.content}</p>
      {box.expanded && <p>This is the expanded content.</p>}
    </div>
  );
};

export default Page;







//CSS




.page-container {
  display: flex;
  min-height: 100vh; /* Set minimum viewport height */
  background-color: #f5f5f5; /* Light gray background */
}

.left-side,
.right-side {
  flex: 1;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 1rem; /* Spacing between elements */
}

.box {
  background-color: #fff; /* White box background */
  border-radius: 4px; /* Rounded corners */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
  padding: 1.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.box.expanded {
  height: auto;
}

.box h3 {
  margin-bottom: 0.5rem;
  font-weight: 500; /* Bold text */
}

.file-upload {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.file-upload img {
  width: 32px;
  height: 32px;
  cursor: pointer;
}

.row-selection {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.row-selection label {
  font-weight: 500;
}

.row-selection select,
.row-selection input[type="number"] {
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.875rem; /* Smaller font size for inputs */
}

.action-button {
  padding: 1rem 2rem;
  background-color: #333; /* Dark blue background */
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
}
